struct AttributeSyncInfo {
    i64 LastTimestamp;
    string LastSyncID;
    any LastValue;
}

struct AttributePath {
    string ComponentName;
    string AttributeName;
}

struct EntitySyncInfo {
    map<AttributePath, ComponentSyncInfo> Components;  // FIXME: there is no map in KIARA, find out what should be here
}

struct AttributeDef {
    string Guid;
    string Name;
    any DefaultValue;
    string Type;  // contains AssemblyQualifiedName of the type
}

struct ComponentDef {
    string Guid;
    string Name;
    array<AttributeDef> AttributeDefs;
}

service scalability {
    // Called by client on the server to initiate communication. Transmits the client's SyncID to server and signals
    // that all other methods of the interface have been registered and ready to be called.
    void clientHandshake(string clientSyncID);

    // Called by the server on the client in response to clientHandshake. Transmits the server's SyncID to server and
    // signals that all other methods of the interface have been registered and ready to be called.
    void serverHandshake(string serverSyncID);

    // Called to notify that an entity has been added to the caller's world. Receiving side should create a new entity
    // if it isn't present in the world and use provided initialSyncInfo as a starting sync info. If the entity exists
    // already, this message should be processed as changeAttributes, where each individual attribute of an entity is
    // synchronized.
    // @param guid Guid of the added entity.
    // @param syncInfo Initial sync info of the added entity.
    void addEntity(string guid, EntitySyncInfo initialSyncInfo);

    // Called to notify that an entity has been removed from the caller's world. If the entity is not present on the
    // receiving side, this messages should be ignored (except relay nodes, which still should relay it further).
    // @param guid Guid of the removed entity.
    void removeEntity(string guid);

    // Called to notify that a set of entity's attributes has been modified in the caller's world. The receiving side
    // should process each attribute and update local attributes where necessary.
    // @param guid Guid of the affected entity.
    // @param changedAttributes Collection of the affected attributes with their sync info.
    void changeAttributes(string guid, EntitySyncInfo changedAttributes);

    // Called to notify the other parties that a plugin handling given component definition has been loaded remotely.
    // The receving side should register the component locally and remove this component from the deferred plugins'
    // dependencies.
    // @param definition Component definition.
    void registerComponentDefinition(ComponentDef definition);

    // Returns the current time on the remote server. Used to estimate time different between servers.
    DateTime getTime();
}